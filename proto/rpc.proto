syntax = "proto3";

package types;
option go_package = "github.com/aergoio/aergo/types";

import "blockchain.proto";
import "account.proto";
import "node.proto";
import "p2p.proto";
import "metric.proto";

/**
 * AergoRPCService is the main RPC service providing endpoints to interact 
 * with the node and blockchain. If not otherwise noted, methods are unary requests.
 */
service AergoRPCService {
  // Returns the current state of this node
  rpc NodeState (NodeReq) returns (SingleBytes) {}

  // Returns node metrics according to request 
  rpc Metric (MetricsRequest) returns (Metrics) {}

  // Returns current blockchain status (best block's height and hash)
  rpc Blockchain (Empty) returns (BlockchainStatus) {
  }

  // Returns list of Blocks without body according to request
  rpc ListBlockHeaders(ListParams) returns (BlockHeaderList) {
  }

  // Returns list of block metadata (hash, header, and number of transactions) according to request
  rpc ListBlockMetadata(ListParams) returns (BlockMetadataList) {
  }

  // Returns a stream of new blocks as they get added to the blockchain
  rpc ListBlockStream(Empty) returns (stream Block) {
  }

  // Returns a stream of new block's metadata as they get added to the blockchain
  rpc ListBlockMetadataStream(Empty) returns (stream BlockMetadata) {
  }

  // Return a single block incl. header and body, queried by hash or number
  rpc GetBlock(SingleBytes) returns (Block) {   
  }

  // Return a single block's metdata (hash, header, and number of transactions), queried by hash or number
  rpc GetBlockMetadata(SingleBytes) returns (BlockMetadata) {
  }

  // Return a single block's body, queried by hash or number and list parameters
  rpc GetBlockBody(BlockBodyParams) returns (BlockBodyPaged) {
  }

  // Return a single transaction, queried by transaction hash
  rpc GetTX(SingleBytes) returns (Tx) {
  }

  // Return information about transaction in block, queried by transaction hash
  rpc GetBlockTX(SingleBytes) returns (TxInBlock) {
  }

  // Return transaction receipt, queried by transaction hash
  rpc GetReceipt(SingleBytes) returns (Receipt) {
  }

  // Return ABI stored at contract address
  rpc GetABI(SingleBytes) returns (ABI) {
  }

  // Sign and send a transaction from an unlocked account
  rpc SendTX(Tx) returns (CommitResult) {
  }

  // Sign transaction with unlocked account
  rpc SignTX(Tx) returns (Tx) {
  }

  // Verify validity of transaction
  rpc VerifyTX(Tx) returns (VerifyResult) {
  }

  // Commit a signed transaction
  rpc CommitTX(TxList) returns (CommitResultList) {
  }

  // Return state of account
  rpc GetState(SingleBytes) returns (State) {
  }

  // Return state of account, including merkle proof
  rpc GetStateAndProof(AccountAndRoot) returns (AccountProof) {
  }

  // Create a new account in this node
  rpc CreateAccount(Personal) returns (Account) {
  }

  // Return list of accounts in this node
  rpc GetAccounts(Empty) returns (AccountList) {
  }

  // Lock account in this node
  rpc LockAccount(Personal) returns (Account) {
  }

  // Unlock account in this node
  rpc UnlockAccount(Personal) returns (Account) {
  }

  // Import account to this node
  rpc ImportAccount(ImportFormat) returns (Account) {
  }

  // Export account stored in this node
  rpc ExportAccount(Personal) returns (SingleBytes) {
  }

  // Query a contract method
  rpc QueryContract(Query) returns (SingleBytes) {
  }

  // Query contract state
  rpc QueryContractState(StateQuery) returns (StateQueryProof) {
  }

  // Return list of peers of this node and their state
  rpc GetPeers(Empty) returns (PeerList) {
  }

  // Return list of votes
  rpc GetVotes(SingleBytes) returns (VoteList) {
  }

  // Return staking information
  rpc GetStaking(SingleBytes) returns (Staking) {
  }

  // Return name information
  rpc GetNameInfo(Name) returns (NameInfo) {
  }
}

// BlockchainStatus is current status of blockchain
message BlockchainStatus {
  bytes best_block_hash = 1;
  uint64 best_height = 2;
}

message Input {
  bytes hash = 1;
  repeated bytes address = 2;
  bytes value = 3;
  bytes script = 4;
}


message Output {
  uint32 index = 1;
  bytes address = 2;
  bytes value = 3;
  bytes script = 4;
}

message Empty {

}

message SingleBytes {
  bytes value = 1;
}

message AccountAndRoot {
  bytes Account = 1;
  bytes Root = 2;
  bool Compressed = 3;
}

message Peer {
  PeerAddress address = 1;
  NewBlockNotice bestblock = 2;
  int32 state = 3;
  bool hidden = 4;
}

message PeerList {
  repeated Peer peers=1;
}

message ListParams {
  bytes hash = 1;
  uint64 height = 2;
  uint32 size = 3;
  uint32 offset = 4;
  bool asc = 5;
}

message PageParams {
  uint32 offset = 1;
  uint32 size = 2;
}

message BlockBodyPaged {
  uint32 total = 1;
  uint32 offset = 2;
  uint32 size = 3;
  BlockBody body = 4;
}

message BlockBodyParams {
  bytes hashornumber = 1;
  PageParams paging = 2;
}

message BlockHeaderList {
  repeated Block blocks = 1;
}

message BlockMetadata {
  bytes hash = 1;
  BlockHeader header = 2;
  int32 txcount = 3;
}

message BlockMetadataList {
  repeated BlockMetadata blocks = 1;
}

enum CommitStatus {
  TX_OK = 0;
  TX_NONCE_TOO_LOW = 1;
  TX_ALREADY_EXISTS = 2;
  TX_INVALID_HASH = 3;
  TX_INVALID_SIGN = 4;
  TX_INVALID_FORMAT = 5;
  TX_INSUFFICIENT_BALANCE = 6;
  TX_HAS_SAME_NONCE= 7;
  TX_INTERNAL_ERROR = 9;
}

message CommitResult {
  bytes hash = 1;
  CommitStatus error = 2;
  string detail = 3;
}

message CommitResultList {
  repeated CommitResult results = 1;
}

enum VerifyStatus {
  VERIFY_STATUS_OK = 0;
  VERIFY_STATUS_SIGN_NOT_MATCH = 1;
  VERIFY_STATUS_INVALID_HASH = 2; //TODO: not yet impl
}

message VerifyResult {
  Tx tx = 1;
  VerifyStatus error = 2;
}

message Personal {
  string passphrase = 1;
  Account account = 2;
}

message ImportFormat{
  SingleBytes wif = 1;
  string oldpass = 2;
  string newpass = 3;
}

message Staking {
  bytes amount = 1;
  uint64 when = 2;
}

message Vote {
  bytes candidate = 1;
  bytes amount = 2;
}

message VoteList {
  repeated Vote votes = 1;
}

message NodeReq {
  bytes timeout = 1;
  bytes component = 2;
}

message Name {
  string name = 1;
}

message NameInfo {
  Name name = 1;
  bytes owner = 2;
}
