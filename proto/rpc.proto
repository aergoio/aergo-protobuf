syntax = "proto3";

package types;
option go_package = "github.com/aergoio/aergo/types";

// import "google/api/annotations.proto";
//import "google/protobuf/timestamp.proto";
//import "bitbucket.org/cloudwallet/argo-alpha/proto/blockchain.proto";
import "blockchain.proto";
import "account.proto";
import "node.proto";
import "p2p.proto";

/* BlockService serves APIs that aergosvr provides.
 * Some methods optionally contains context path if it is also provided by REST API.
 */
service AergoRPCService {
  rpc NodeState (SingleBytes) returns (SingleBytes) {}
  rpc Blockchain (Empty) returns (BlockchainStatus) {
    // option (google.api.http) = {
    //   get: "/blockchain"
    // };
  }
  rpc ListBlockHeaders(ListParams) returns (BlockHeaderList) {
  }

  rpc ListBlockStream(Empty) returns (stream Block) {
  }

  rpc GetBlock(SingleBytes) returns (Block) {
    // option (google.api.http) = {
    //   get: "/blocks/{blockHash}"
    // };    
  }
  rpc GetTX(SingleBytes) returns (Tx) {
    // option (google.api.http) = {
    //   get: "/transactions/{value}"
    // };    
  }

  rpc GetBlockTX(SingleBytes) returns (TxInBlock) {
  }

  rpc GetReceipt(SingleBytes) returns (Receipt) {
  }

  rpc GetABI(SingleBytes) returns (ABI) {
  }

  rpc SendTX(Tx) returns (CommitResult) {
  }

  rpc CommitTX(TxList) returns (CommitResultList) {
    // option (google.api.http) = {
    //   post: "/transactions"
    //   body: "transaction"
    // };    
  }

  rpc GetState(SingleBytes) returns (State) {
  }

  rpc GetStateAndProof(AccountAndRoot) returns (StateProof) {
  }

  rpc CreateAccount(Personal) returns (Account) {
  }

  rpc GetAccounts(Empty) returns (AccountList) {
  }

  rpc LockAccount(Personal) returns (Account) {
  }

  rpc UnlockAccount(Personal) returns (Account) {
  }

  rpc ImportAccount(ImportFormat) returns (Account) {
  }

  rpc ExportAccount(Personal) returns (SingleBytes) {
  }

  rpc SignTX(Tx) returns (Tx) {
  }

  rpc VerifyTX(Tx) returns (VerifyResult) {
  }

  rpc QueryContract(Query) returns (SingleBytes) {
  }

  rpc GetPeers(Empty) returns (PeerList) {
  }

  rpc GetVotes(SingleBytes) returns (VoteList) {
  }
}

// BlockchainStatus is current status of blockchain
message BlockchainStatus {
  bytes best_block_hash = 1;
  uint64 best_height = 2;
}

message Input {
  bytes hash = 1;
  repeated bytes address = 2;
  bytes value = 3;
  bytes script = 4;
}


message Output {
  uint32 index = 1;
  bytes address = 2;
  bytes value = 3;
  bytes script = 4;
}

message Empty {

}

message SingleBytes {
  bytes value = 1;
}

message AccountAndRoot {
  bytes Account = 1;
  bytes Root = 2;
}

message Peer {
  PeerAddress address = 1;
  NewBlockNotice bestblock = 2;
  int32 state = 3;
}

message PeerList {
  repeated Peer peers=1;
}

message ListParams {
  bytes hash = 1;
  uint64 height = 2;
  uint32 size = 3;
  uint32 offset = 4;
  bool asc = 5;
}

message BlockHeaderList {
  repeated Block blocks = 1;
}

enum CommitStatus {
  TX_OK = 0;
  TX_NONCE_TOO_LOW = 1;
  TX_ALREADY_EXISTS = 2;
  TX_INVALID_HASH = 3;
  TX_INVALID_SIGN = 4;
  TX_INVALID_FORMAT = 5;
  TX_INSUFFICIENT_BALANCE = 6;
  TX_HAS_SAME_NONCE= 7;
  TX_INTERNAL_ERROR = 9;
}

message CommitResult {
  bytes hash = 1;
  CommitStatus error = 2;
  string detail = 3;
}

message CommitResultList {
  repeated CommitResult results = 1;
}

enum VerifyStatus {
  VERIFY_STATUS_OK = 0;
  VERIFY_STATUS_SIGN_NOT_MATCH = 1;
  VERIFY_STATUS_INVALID_HASH = 2; //TODO: not yet impl
}

message VerifyResult {
  Tx tx = 1;
  VerifyStatus error = 2;
}

message Personal {
  string passphrase = 1;
  Account account = 2;
}

message ImportFormat{
  SingleBytes wif = 1;
  string oldpass = 2;
  string newpass = 3;
}
