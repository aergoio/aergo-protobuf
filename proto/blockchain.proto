syntax = "proto3";

package types;
option go_package = "github.com/aergoio/aergo/types";

message Block {
  bytes hash = 1;
  BlockHeader header = 2;
  BlockBody body = 3;
}

message BlockHeader {
  bytes chainID = 1; // chain identifier
  bytes prevBlockHash = 2; // hash of previous block
  uint64 blockNo = 3; // block number
  int64 timestamp = 4; // block creation time stamp
  bytes blocksRootHash = 5; // hash of root of block merkle tree
  bytes txsRootHash = 6; // hash of root of transaction merkle tree
  bytes receiptsRootHash = 7; // hash of root of receipt merkle tree
  uint64 confirms = 8; // number of blocks this block is able to confirm
  bytes pubKey = 9; // block producer's public key
  bytes coinbaseAccount = 10; // address of account to receive fees
  bytes sign = 11; // block producer's signature of BlockHeader
  // CAUTION: THE SIGN MUST BE THE LAST FIELD.
  // DO NOT ADD A NEW FIELD AFTER THE SIGN FIELD.
}

message BlockBody {
  repeated Tx txs = 1;
}

message TxList {
  repeated Tx txs = 1;
}

enum TxType {
  NORMAL = 0;
  GOVERNANCE = 1;
}

message Tx {
  bytes hash = 1;
  TxBody body = 2;
}

message TxBody {
  uint64 nonce = 1; // increasing number used only once per sender account
  bytes account = 2; // decoded account address
  bytes recipient = 3; // decoded account address
  bytes amount = 4; // variable-length big integer
  bytes payload = 5;
  uint64 gasLimit = 6; // currently not used
  bytes gasPrice = 7; // variable-length big integer. currently not used
  TxType type = 8;
  bytes chainIdHash = 9; // hash value of chain identifier in the block
  bytes sign = 10; // sender's signature for this TxBody
}

// TxIdx specifies a transaction's block hash and index within the block body
message TxIdx {
  bytes blockHash = 1;
  int32 idx = 2;
}

message TxInBlock {
  TxIdx txIdx = 1;
  Tx tx = 2;
}

message State {
  uint64 nonce = 1;
  bytes balance = 2;
  bytes codeHash = 3;
  bytes storageRoot = 4;
  uint64 sqlRecoveryPoint = 5;
}

message AccountProof {
  State state = 1;
  bool inclusion = 2;
  bytes key = 3;
  bytes proofKey = 4;
  bytes proofVal = 5;
  bytes bitmap = 6;
  uint32 height = 7;
  repeated bytes auditPath = 8;
}
message ContractVarProof{
  bytes value = 1;
  bool inclusion = 2;
  string key = 3;
  bytes proofKey = 4;
  bytes proofVal = 5;
  bytes bitmap = 6;
  uint32 height = 7;
  repeated bytes auditPath = 8;
}

message StateQueryProof {
  AccountProof contractProof = 1;
  repeated ContractVarProof varProofs = 2;
}

message Receipt {
  bytes contractAddress = 1;
  string status = 2;
  string ret = 3;
  bytes txHash = 4;
  bytes feeUsed = 5;
  bytes cumulativeFeeUsed = 6;
  bytes bloom = 7;
  repeated Event events = 8;

  uint64 blockNo = 9;
  bytes blockHash = 10;
  int32 txIndex = 11;
  bytes from = 12;
  bytes to = 13;
}

message Event {
  bytes contractAddress = 1;
  string eventName = 2;
  string jsonArgs = 3;
  int32 eventIdx = 4;

  bytes txHash = 5;
  bytes blockHash = 6;
  uint64 blockNo = 7;
  int32 txIndex = 8;
}

message FnArgument {
  string name = 1;
}

message Function {
  string name = 1;
  repeated FnArgument arguments = 2;
  bool payable = 3;
  bool view = 4;
}

message StateVar {
  string name = 1;
  string type = 2;
  int32 len = 3;
}

message ABI {
  string version = 1;
  string language = 2;
  repeated Function functions = 3;
  repeated StateVar state_variables = 4;
}

message Query {
  bytes contractAddress = 1;
  bytes queryinfo= 2;
}

message StateQuery {
  bytes contractAddress = 1;
  repeated string storageKeys = 2;
  bytes root = 3;
  bool compressed = 4;
}

message FilterInfo {
  bytes contractAddress = 1;
  string eventName = 2;
  uint64 blockfrom = 3;
  uint64 blockto = 4;
  bool desc = 5;
  bytes argFilter = 6;
  int32 recentBlockCnt = 7;
}
