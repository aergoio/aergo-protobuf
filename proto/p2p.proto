syntax = "proto3";

package types;
option go_package = "github.com/aergoio/aergo/types";

import "blockchain.proto";
import "node.proto";

// MsgHeader contains common properties of all p2p messages
message MsgHeader {
  // Deprecated client version.
  string clientVersion = 1;
  // unix time
  int64 timestamp = 2;
  // allows requesters to use request data when processing a response
  string id = 3;
  // Gossip is flag to have receiver peer gossip the message to neighbors
  // Deprecated whether to gossip other peers is determined by subprotocol since version 0.3.0 .
  bool gossip = 4;
  // PeerID is id of node that created the message (not the peer that may have sent it). =base58(mh(sha256(nodePubKey)))
  bytes peerID = 5;
  // nodePubKey Authoring node Secp256k1 public key (32bytes) - protobufs serielized
  bytes nodePubKey = 6;
  // signature of message data + method specific data by message authoring node. format: string([]bytes)
  bytes sign = 7;
  // sub category of message. the receiving peer determines how to deserialize payload data and whether to spread messages to other peers
  uint32 subprotocol = 8;
  // size of bytes of the payload
  uint32 length = 9;
}

// Not all response contains ResultStatus value.
// names from gRPC status
enum ResultStatus {
  // OK is returned on success.
  OK = 0 ;

  // CANCELED when operation was canceled (typically by the caller).
  CANCELED  = 1;

  // UNKNOWN
  UNKNOWN  = 2;

  // INVALID_ARGUMENT is missing or wrong value of argument
  INVALID_ARGUMENT = 3;

  // DEADLINE_EXCEEDED timeout
  DEADLINE_EXCEEDED = 4;

  // NOT_FOUND
  NOT_FOUND = 5;

  // ALREADY_EXISTS
  ALREADY_EXISTS = 6;

  // PERMISSION_DENIED
  PERMISSION_DENIED = 7;

  //
  RESOURCE_EXHAUSTED = 8;

  //
  FAILED_PRECONDITION = 9;

  // ABORTED
  ABORTED = 10;

  //
  OUT_OF_RANGE = 11;

  // UNIMPLEMENTED indicates operation is not implemented or not
  // supported/enabled in this service.
  UNIMPLEMENTED = 12;

  // INTERNAL errors. Means some invariants expected by underlying
  // system has been broken. If you see one of these errors,
  // something is very broken.
  INTERNAL = 13;

  // Unavailable indicates the service is currently unavailable.
  // This is a most likely a transient condition and may be corrected
  // by retrying with a backoff.
  //
  // See litmus test above for deciding between FailedPrecondition,
  // Aborted, and Unavailable.
  UNAVAILABLE = 14;

  DATA_LOSS = 15;

  // UNAUTHENTICATED indicates the request does not have valid
  // authentication credentials for the operation.
  UNAUTHENTICATED = 16;
}

// Deprecated P2PMessage is data structure for aergo v0.2 or earlier. This structure is not used anymore since v0.3.0.
message P2PMessage {
  MsgHeader header = 1;
  bytes data = 2;
}

// Ping request message
message Ping {
  bytes best_block_hash = 1;
  uint64 best_height = 2;
}

// Ping response message
message Pong {
  bytes bestBlockHash = 1;
  uint64 bestHeight = 2;
}

// Status is peer status exchanged during handshaking.
message Status {
  PeerAddress sender = 1;
  bytes bestBlockHash = 2;
  uint64 bestHeight = 3;
  bytes chainID = 4;
  // noExpose means that peer doesn't want to be known to other peers.
  bool noExpose = 5;
  // version of server binary
  string version = 6;
}

// GoAwayNotice is sent before host peer is closing connection to remote peer. it contains why the host closing connection.
message GoAwayNotice {
  string message = 1;
}

message AddressesRequest {
  PeerAddress sender = 1;
  uint32 maxSize = 2;
}

message AddressesResponse {
  ResultStatus status = 1;
  repeated PeerAddress peers = 2;
}

// NewBlockNotice is sent to other peers when host node add a block, which is not produced by this host peer (i.e. added block
// that other bp node produced.) It contains just hash and blockNo. The host node will not send notice if target receiving peer
// knows that block already at best effort.
message NewBlockNotice {
  bytes blockHash = 1;
  uint64 blockNo = 2;
}

// BlockProducedNotice is sent when BP created blocks and host peer is BP (or surrogate of BP) and receiving peer is also trusted BP or surrogate of BP.
// It contains whole block information
message BlockProducedNotice {
  bytes producerID = 1;
  uint64 blockNo = 2;
  Block block = 3;
}

// GetBlockHeadersRequest 
message GetBlockHeadersRequest {
  // Hash indicated referenced block hash. server will return headers from this block.
  bytes hash = 1;
  // Block height instead of hash will be used for the first returned block, if hash is nil or empty
  uint64 height=2;
  uint64 offset=3;
  uint32 size=4;
  // default is false.
  bool asc=5;
}

// GetBlockResponse contains response of GetBlockRequest.
message GetBlockHeadersResponse {
  ResultStatus status = 1;
  repeated bytes hashes = 2;
  repeated BlockHeader headers = 3;
  bool hasNext = 4;
}

// GetBlockRequest request blocks informations, not just single block.
message GetBlockRequest {
  repeated bytes hashes = 1;
}

// GetBlockResponse contains response of GetBlockRequest.
message GetBlockResponse {
  ResultStatus status = 1;
  repeated Block blocks = 2;
  bool hasNext = 3;
}

message NewTransactionsNotice {
  repeated bytes txHashes = 1;
}

message GetTransactionsRequest {
  repeated bytes hashes = 1;
}
message GetTransactionsResponse {
  ResultStatus status = 1;
  repeated bytes hashes = 2;
  repeated Tx txs = 3;
  bool hasNext = 4;
}
// GetMissingRequest 
message GetMissingRequest {
  // Hash indicated referenced sparse block hash array of longest chain(caller).
  repeated bytes hashes = 1;
  // stophash will be used the meaning of end point of missing part.
  bytes stophash = 2;
}

message GetAncestorRequest {
  // Hash indicated referenced sparse block hash array of longest chain(caller).
  repeated bytes hashes = 1;
}

message GetAncestorResponse {
  ResultStatus status = 1;
  bytes ancestorHash = 2;
  uint64 ancestorNo = 3;
}

message GetHashByNo {
  uint64 blockNo = 1;
}

message GetHashByNoResponse {
  ResultStatus status = 1;
  bytes blockHash = 2;
}

// GetHashesRequest
message GetHashesRequest {
    // prevHash indicated referenced block hash. server will return hashes after this block.
    bytes prevHash = 1;
    // prevNumber indicated referenced block
    uint64 prevNumber=2;
    // maximum count of hashes that want to get
    uint64 size=3;
}

// GetHashesResponse contains response of GetHashesRequest.
message GetHashesResponse {
    ResultStatus status = 1;
    repeated bytes hashes = 2;
    bool hasNext = 3;
}
